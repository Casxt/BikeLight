LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
--*********************
--
--
--
--*********************
ENTITY LEDCtrl IS
	PORT(PWMclock:IN STD_LOGIC;                         --PWM计数频率(应为其输出波形频率的256倍，计划256KHz以上)
        Switchclock:IN STD_LOGIC;                       --行扫描频率(应大于刷新率的8倍，计划160Hz以上)
        Breathclock:IN STD_LOGIC;                       --呼吸步进频率(严格为170Hz)
        Rollclock:IN STD_LOGIC;                        --循环时钟
		LEDEnable:IN STD_LOGIC;                         --点阵使能
        State:IN INTEGER  RANGE 0 TO 3;                 --0:左 1:右 2:停 3:正常
        reset:IN STD_LOGIC;                             --复位
        Lineout: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);      --输出行控信号
        Columnout: OUT STD_LOGIC_VECTOR(15 DOWNTO 0));  --输出列控信号
END LEDCtrl;

ARCHITECTURE LEDCtrler OF LEDCtrl IS
    COMPONENT LEDRefresh
        GENERIC (IMGNUM : INTEGER := 6);
        PORT(Rollclock:IN STD_LOGIC;                        --循环时钟
            PWMclock:IN STD_LOGIC;                          --PWM计数频率(应为其输出波形频率的256倍，计划256KHz以上)
            Switchclock:IN STD_LOGIC;                       --行扫描频率(应大于刷新率的8倍，计划160Hz以上)
            LEDEnable:IN STD_LOGIC;                         --点阵使能
            reset:IN STD_LOGIC;                             --复位
            luma:IN INTEGER  RANGE 0 TO 255;                --亮度(直接输入给PWM作为占空比)
            DataSel: IN INTEGER  RANGE 0 TO IMGNUM-1;       --图像选择
            Lineout: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);      --输出行控信号
            Columnout: OUT STD_LOGIC_VECTOR(15 DOWNTO 0));  --输出列控信号
    END COMPONENT;
    SIGNAL RsvCount:STD_LOGIC;--反向计数
    SIGNAL BreathCount:INTEGER RANGE 0 TO 511;--呼吸计数器
	SIGNAL IMGSel:INTEGER RANGE 0 TO 5;--图案选择
    SIGNAL BreathEnable:STD_LOGIC;--图案选择
BEGIN
    LEDPoint : LEDRefresh PORT MAP (Rollclock=>Rollclock,PWMclock=>PWMclock,Switchclock=>Switchclock,LEDEnable=>LEDEnable,
    reset=>reset,luma=>BreathCount,DataSel=>IMGSel,Lineout=>Lineout,Columnout=>Columnout);
	PROCESS(Breathclock,State,reset,IMGSel,BreathCount,RsvCount,LEDEnable,BreathEnable)
	BEGIN
		IF(reset='1' OR LEDEnable='0')THEN
			BreathEnable <= '0';
            BreathCount <= 0;
            RsvCount <= '0';
            IMGSel <= 3;
		ELSE
            --IF(State = 3)THEN
                IF(BreathEnable='1')THEN
					IF(Breathclock'event AND Breathclock='0')THEN
						IF(BreathCount=255)THEN
							RsvCount <= NOT RsvCount;
							BreathCount <= BreathCount-1;
						ELSIF(BreathCount=0)THEN
							RsvCount <= NOT RsvCount;
							BreathCount <= BreathCount+1;
						ELSE
							IF(RsvCount='0')THEN
								BreathCount <= BreathCount+1;
							ELSE
								BreathCount <= BreathCount-1;
							END IF;
						END IF;
					END IF;
					IF(RsvCount'event AND RsvCount='0')THEN--RSV下降沿为一个周期
						IF(IMGSel>2 AND IMGSel<5)THEN
							IMGSel<=IMGSel+1;
						ELSE
							IMGSel<=3;
						END IF;
					END IF;
				--ELSE
				--	BreathEnable<='1';
				--	RsvCount <= '0';
					--IMGSel <= 3;
				--END IF;
            ELSIF(State = 2)THEN
                BreathCount <= 255;
                RsvCount <= '0';
                IMGSel<=2;
                BreathEnable <= '0';
            ELSIF(State = 1)THEN
                BreathCount <= 255;
                RsvCount <= '0';
                IMGSel<=1;
                BreathEnable <= '0';
            ELSIF(State = 0)THEN
                BreathCount <= 255;
                RsvCount <= '0';
                IMGSel<=0;
                BreathEnable <= '0';
            END IF;
		END IF;
	END PROCESS;
END LEDCtrler;