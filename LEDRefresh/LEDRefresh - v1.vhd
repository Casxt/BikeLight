LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.NUMERIC_STD.ALL;
--------------------------------
--LED点阵刷新
--内部存放预设图片，外部调用
--根据时钟进行切换
--调用PWM模块调节亮度
--
--------------------------------

ENTITY LEDRefresh IS
    GENERIC (IMGNUM : INTEGER := 6);
	PORT(Rollclock:IN STD_LOGIC;                        --循环时钟
        PWMclock:IN STD_LOGIC;                          --PWM计数频率(应为其输出波形频率的256倍，计划256KHz以上)
        Switchclock:IN STD_LOGIC;                       --行扫描频率(应大于刷新率的8倍，计划160Hz以上)
		LEDEnable:IN STD_LOGIC;                         --点阵使能
        reset:IN STD_LOGIC;                             --复位
		luma:IN INTEGER  RANGE 0 TO 255;                --亮度(直接输入给PWM作为占空比)
		DataSel: IN INTEGER  RANGE 0 TO IMGNUM-1;       --图像选择
		Lineout: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);      --输出行控信号
        Columnout: OUT STD_LOGIC_VECTOR(15 DOWNTO 0));  --输出列控信号
END LEDRefresh;
ARCHITECTURE LEDRefresher OF LEDRefresh IS
	COMPONENT PWM
		PORT(PWMclock:IN STD_LOGIC;
		reset:IN STD_LOGIC;
		div:IN INTEGER  RANGE 0 TO 255;
		output:OUT STD_LOGIC);
	END COMPONENT;
	SIGNAL PwmWave:STD_LOGIC;               --PWM输出信号线
    SIGNAL lcount:INTEGER RANGE 0 TO 7;     --行计数器
                        --图片数    行数        列数
    --TYPE LINEP IS ARRAY (15 DOWNTO 0) OF STD_LOGIC;
    --TYPE IMG IS ARRAY (7 DOWNTO 0) OF STD_LOGIC_VECTOR(15 DOWNTO 0);
    TYPE IMGS IS ARRAY (IMGNUM-1 DOWNTO 0,7 DOWNTO 0) OF STD_LOGIC_VECTOR(15 DOWNTO 0);
    --TYPE IMGS IS ARRAY (IMGNUM-1 DOWNTO 0,7 DOWNTO 0,15 DOWNTO 0) OF STD_LOGIC;
    --IMG镜像对称
    SIGNAL Data:IMGS;
BEGIN
	PWMGen: PWM PORT MAP (PWMclock=>PWMclock,reset=>reset,div=>luma,output=>PwmWave);
	PROCESS(Rollclock,Switchclock,lcount,DataSel,PwmWave,LEDEnable,reset,Data)
	BEGIN
		IF(LEDEnable='0' OR reset='1')THEN
			Columnout<=std_logic_vector(to_unsigned(0, 16));
            Lineout<="11111111";
            Data<=
                (	--5
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '1','0','1','0','1','0','1','0'),
                        ('0','1','0','1','0','1','0','1' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1')
                    ),
                    --4
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('0','1','0','1','0','1','0','1' , '1','0','1','0','1','0','1','0'),
                        ('0','1','0','1','0','1','0','1' , '1','0','1','0','1','0','1','0'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1')
                    ),
                    --3
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('0','1','0','1','0','1','0','1' , '1','1','1','1','1','1','1','1'),
                        ('1','1','1','1','1','1','1','1' , '1','0','1','0','1','0','1','0'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1')
                    ),
                    --2停车
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '1','0','0','0','0','0','0','1'),
                        ('0','0','0','0','0','0','0','0' , '0','1','0','0','0','0','1','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','1','0','0','1','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','0','1','1','0','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','0','1','1','0','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','1','0','0','1','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','1','0','0','0','0','1','0'),
                        ('0','0','0','0','0','0','0','0' , '1','0','0','0','0','0','0','1')
                    ),
                    --1箭头
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','1','0','0','0' , '0','0','0','0','1','0','0','0'),
                        ('0','0','0','0','0','1','0','0' , '0','0','0','0','0','1','0','0'),
                        ('0','0','0','0','0','0','1','0' , '0','0','0','0','0','0','1','0'),
                        ('0','1','1','1','1','1','1','1' , '0','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','1','0' , '0','0','0','0','0','0','1','0'),
                        ('0','0','0','0','0','1','0','0' , '0','0','0','0','0','1','0','0'),
                        ('0','0','0','0','1','0','0','0' , '0','0','0','0','1','0','0','0')
                    ),
                    --0箭头
                    (
                        ('0','0','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','1','0','0','0','0' , '0','0','0','1','0','0','0','0'),
                        ('0','0','1','0','0','0','0','0' , '0','0','1','0','0','0','0','0'),
                        ('0','1','0','0','0','0','0','0' , '0','1','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','0' , '1','1','1','1','1','1','1','0'),
                        ('0','1','0','0','0','0','0','0' , '0','1','0','0','0','0','0','0'),
                        ('0','0','1','0','0','0','0','0' , '0','0','1','0','0','0','0','0'),
                        ('0','0','0','1','0','0','0','0' , '0','0','0','1','0','0','0','0')
                    )
                );
		ELSE
            --计数
            IF(Switchclock'event AND Switchclock='0')THEN
                --选中一行
                lcount<=lcount+1;
            END IF;
            Lineout <= NOT TO_STDLOGICVECTOR("00000001" SLL lcount);--选中的一行行信号低电位,未选中的行行信号高电位
            --显示一列
            
            --循环
            IF(Rollclock'event AND Rollclock='0')THEN
                FOR l IN 0 TO 7 LOOP
                    Data(0,l) <= TO_STDLOGICVECTOR(TO_BITVECTOR(Data(DataSel,l)) ROL 1);
                    Data(1,l) <= TO_STDLOGICVECTOR(TO_BITVECTOR(Data(DataSel,l)) ROR 1);
                END LOOP; 
            END IF;
            
            FOR c IN 0 TO 15 LOOP
                IF Data(DataSel,lcount)(c)='1' THEN                   
                    Columnout(c) <= PwmWave;--选中的一列列信号PWM电位
                ELSE
                    Columnout(c) <= '0';    --未选中的一列列信号低电位
                END IF;                                     
            END LOOP;                                     
		END IF;
	END PROCESS;
END LEDRefresher;