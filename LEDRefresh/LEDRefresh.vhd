LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.NUMERIC_STD.ALL;
--****2015210078 张楷****
--LED点阵刷新
--内部存放预设图片，外部调用
--根据时钟进行切换
--调用PWM模块调节亮度
--********2017.11********
ENTITY LEDRefresh IS
    GENERIC (IMGNUM : INTEGER := 6);
	PORT(Rollclock:IN STD_LOGIC;                        --循环时钟(用于图片平移)
        PWMclock:IN STD_LOGIC;                          --PWM计数频率(应为其输出波形频率的256倍，计划256KHz以上)
        Switchclock:IN STD_LOGIC;                       --行扫描频率(应大于刷新率的8倍，计划160Hz以上)
		LEDEnable:IN STD_LOGIC;                         --点阵使能
        reset:IN STD_LOGIC;                             --复位
		luma:IN INTEGER  RANGE 0 TO 255;                --亮度(直接输入给PWM作为占空比)
		DataSel: IN INTEGER  RANGE 0 TO IMGNUM-1;       --图像选择
		Lineout: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);      --输出行控信号
        Columnout: OUT STD_LOGIC_VECTOR(15 DOWNTO 0));  --输出列控信号
END LEDRefresh;
ARCHITECTURE LEDRefresher OF LEDRefresh IS
	COMPONENT PWM
        GENERIC (n : INTEGER := 255);
        PORT(PWMclock:IN STD_LOGIC;     --PWM计数频率(应为其输出波形频率的256倍)
		reset:IN STD_LOGIC;             --重置
		div:IN INTEGER  RANGE 0 TO n;   --占空比0-255
		output:OUT STD_LOGIC);          --输出
	END COMPONENT;
    COMPONENT RollGate IS
        PORT(Rollclock:IN STD_LOGIC;
            reset:IN STD_LOGIC;
            Enable:IN STD_LOGIC;
            Direction:IN STD_LOGIC;                     --0左1右
            input:IN STD_LOGIC_VECTOR(7 DOWNTO 0);
            output:OUT STD_LOGIC_VECTOR(7 DOWNTO 0));
    END COMPONENT;
	SIGNAL PwmWave:STD_LOGIC;                               --PWM输出信号线
    SIGNAL lcount:INTEGER RANGE 0 TO 7;                     --行计数器
    SIGNAL RollEnable:STD_LOGIC;                            --循环使能
    SIGNAL Direction:STD_LOGIC;                             --循环使能
    SIGNAL ColumnSignal: STD_LOGIC_VECTOR(15 DOWNTO 0);     --输出列控信号
                        --图片数6             行数8      列数16
    TYPE IMGS IS ARRAY (IMGNUM-1 DOWNTO 0,7 DOWNTO 0,15 DOWNTO 0) OF STD_LOGIC;
    --IMG镜像对称
    CONSTANT Data:IMGS:=
                (	--5
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','1','0','0','1','0','0'),
                        ('0','0','1','0','0','1','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','1','0','0','1','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','1','1','1','1','1','1','0' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '1','1','1','1','1','1','1','1'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0')
                    ),
                    --4
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','1' , '1','1','1','1','1','1','1','1'),
                        ('1','1','1','1','1','1','1','1' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1'),
                        ('0','0','0','0','0','0','0','0' , '1','1','1','1','1','1','1','1')
                    ),
                    --3
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','1','0','0','0','0','1','0' , '0','0','0','1','1','0','0','0'),
                        ('1','0','0','0','0','0','0','1' , '0','0','0','1','1','0','0','0'),
                        ('0','1','1','1','1','1','1','0' , '0','0','0','0','0','0','0','0'),
                        ('1','1','0','0','0','1','1','0' , '0','0','0','0','0','0','0','0'),
                        ('0','1','0','0','0','0','1','0' , '0','1','0','0','0','0','1','0'),
                        ('1','0','1','0','0','1','0','1' , '1','0','1','0','0','1','0','1'),
                        ('0','1','0','0','0','0','1','0' , '0','1','0','0','0','0','1','0' )
                    ),
                    --2停车
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '1','0','0','0','0','0','0','1'),
                        ('0','0','0','0','0','0','0','0' , '0','1','0','0','0','0','1','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','1','0','0','1','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','0','1','1','0','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','0','1','1','0','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','0','1','0','0','1','0','0'),
                        ('0','0','0','0','0','0','0','0' , '0','1','0','0','0','0','1','0'),
                        ('0','0','0','0','0','0','0','0' , '1','0','0','0','0','0','0','1')
                    ),
                    --1箭头
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','1','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','0','1','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','0','0','1','0' , '0','0','0','0','0','0','0','0'),
                        ('0','1','1','1','1','1','1','1' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','0','0','1','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','0','1','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','0','1','0','0','0' , '0','0','0','0','0','0','0','0')
                    ),
                    --0箭头
                    (--  15   14  13  12  11  10  9   8     7   6   5   4   3   2   1   0
                        ('0','0','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','1','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','1','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','1','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('1','1','1','1','1','1','1','0' , '0','0','0','0','0','0','0','0'),
                        ('0','1','0','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','1','0','0','0','0','0' , '0','0','0','0','0','0','0','0'),
                        ('0','0','0','1','0','0','0','0' , '0','0','0','0','0','0','0','0')
                    )
                );
BEGIN
	PWMGen: PWM PORT MAP (PWMclock=>PWMclock,reset=>reset,div=>luma,output=>PwmWave);
    RedLEDP : RollGate PORT MAP (Rollclock=>Rollclock,reset=>reset,Enable=>RollEnable,
    Direction=>Direction,input=>ColumnSignal(7 DOWNTO 0),output=>Columnout(7 DOWNTO 0));
    GreenLEDP : RollGate PORT MAP (Rollclock=>Rollclock,reset=>reset,Enable=>RollEnable,
    Direction=>Direction,input=>ColumnSignal(15 DOWNTO 8),output=>Columnout(15 DOWNTO 8));
	PROCESS(Rollclock,Switchclock,lcount,DataSel,PwmWave,LEDEnable,reset)
	BEGIN
		IF(LEDEnable='0' OR reset='1')THEN
			ColumnSignal<=std_logic_vector(to_unsigned(0, 16));
            Lineout<="11111111";
            RollEnable <= '0';
            Direction <= '1';
		ELSE
            --LED行刷新计数
            IF(Switchclock'event AND Switchclock='0')THEN
                lcount<=lcount+1;
            END IF;
            --LED行选 选中的一行行信号低电位,未选中的行行信号高电位
            Lineout <= NOT TO_STDLOGICVECTOR("00000001" SLL lcount);
            --显示一列
            IF(DataSel = 0)THEN     --左转图片
                RollEnable <= '1';  --图片滚动使能
                Direction <= '0';   --设置滚动方向
            ELSIF(DataSel = 1)THEN  --右转图片
                RollEnable <= '1';
                Direction <= '1';
            ELSE                    --其他图片
                RollEnable <= '0';  --禁用图片滚动
                Direction <= '1';   --设置滚动方向(此处设置无用)
            END IF;
            FOR c IN 0 TO 15 LOOP
                IF Data(DataSel,lcount,c)='1' THEN                   
                    ColumnSignal(c) <= PwmWave;--选中的一列列信号PWM电位
                ELSE
                    ColumnSignal(c) <= '0';    --未选中的一列列信号低电位
                END IF;                                     
            END LOOP;                                     
		END IF;
	END PROCESS;
END LEDRefresher;